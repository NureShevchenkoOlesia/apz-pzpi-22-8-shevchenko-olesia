Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра програмної інженерії




Лабораторна робота №3
з дисципліни «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури, створення та відлагодження програмного коду веб-клієнта програмної системи»




Виконала:
ст. гр. ПЗПІ-22-8
Шевченко О. О.
Перевірив:
ст. викл. кат. ПІ
Сокорчук І. П.





Харків 2025
1	ІСТОРІЯ ЗМІН


Назва	Дата	Причина змін	Версія
Cosmorum	20.05.2025	Сформовано завдання	Version 1.0
Cosmorum	21.05.2025	Описано виконану роботу	Version 1.0
 

2	ЗАВДАННЯ


Розробити архітектуру та веб-інтерфейс проекту за темою: «Програмна система для збору, обробки та поширення астрономічних спостережень». Розробити користувацький інтерфейс, який підтримуватиме інтернаціоналізацію та локалізацію. Забезпечити управління користувачами системи, управління даними системи, створення резервних копій налаштувань та даних, експорт даних. 

 
3  ОПИС ВИКОНАНОЇ РОБОТИ
3.1	 Програмна архітектура веб-клієнту програмної системи


Веб-клієнт програмної системи «Cosmorum» реалізований за принципами модульної архітектури з розділенням відповідальності між компонентами, що відповідають за різні частини функціоналу. Архітектура застосовує компонентний підхід: інтерфейс поділено на ізольовані функціональні компоненти, кожен з яких відповідає за певну частину UI (спостереження, профіль, події, підтвердження даних, тощо). Дані, необхідні для роботи кожної сторінки, отримуються через API запити після завантаження компонента. 
Для управління навігацією використовується маршрутизатор (React Router), що дозволяє визначати захищені маршрути для автентифікованих користувачів, а також адміністраторські зони. Дані про поточну сесію, права доступу, мову інтерфейсу та інше зберігаються в контекстах (React Context) та у локальному сховищі браузера.
Центральне місце в архітектурі займає шар взаємодії з API. Всі запити до серверної частини винесено в окремі сервіси з єдиним обробником помилок, підключення токенів та кешування результатів. 

3.2	 Програмні технології та компоненти веб частини системи

Реалізація веб-клієнта здійснена за допомогою фреймворку React.js. Стилізація інтерфейсу виконана з використанням Tailwind CSS, що дозволило швидко сформувати адаптивний дизайн без дублювання стилів.
Для керування формами, валідацією та взаємодією з користувачем було застосовано React Hook Form, а для локалізації – i18next із плагіном для React. Запити до API реалізуються через fetch або axios з централізованим обробником запитів, що додає JWT-токен до заголовків та обробляє помилки авторизації.
Для зберігання стану застосунку використано React Context API, хоча архітектура залишає простір для інтеграції інших рішень, як Redux, у разі масштабування системи. 

3.3 Бізнес-логіка програмної системи у веб-клієнті

	Основна бізнес-логіка веб-клієнта полягає у взаємодії з користувачем, збиранні та перевірці введених даних, викликах до API для обробки зображень, а також наданні зручного інтерфейсу для перегляду, редагування та підтвердження інформації. Особливу увагу приділено логіці астрономічних спостережень: користувач може завантажити зображення, яке автоматично надсилається на аналіз у зовнішній сервіс (Astrometry.net), а після завершення обробки користувач бачить результат з винесеними калібрацією та ідентифікованими об’єктами. Це реалізовано через логіку асинхронного опитування сервісу на предмет завершення обробки. 
Адміністративна частина логіки реалізована окремо: адміністратор має змогу управляти користувачами, спостереженнями та подіями через базу даних. Крім того, реалізована логіка підписки на майбутні астрономічні події. Користувач може підписатися на подію, і система надсилає йому підтвердження та повідомлення напередодні події, використовуючи бекенд-логіку планувальника.

3.4 Захист даних у веб-клієнті програмної системи

Захист даних у веб-клієнті реалізований на кількох рівнях. По-перше, при вході користувача система зберігає JWT-токен у localStorage, і автоматично додає його до кожного запиту до API. Якщо токен відсутній або недійсний, користувач автоматично перенаправляється на сторінку входу.
По-друге, всі дії, пов’язані з редагуванням або підтвердженням даних, доступні лише авторизованим користувачам. Ця логіка реалізована як у маршрутах, так і безпосередньо в компонентах.
Третій аспект безпеки – валідація введених даних. Усі форми мають клієнтську валідацію, яка запобігає відправці некоректних або шкідливих даних. Також обробляються помилки API, наприклад, помилки авторизації або перевищення розміру файлу.

3.5 Взаємодія веб-клієнта програмної системи з іншими компонентами ПЗ

Уся взаємодія веб-клієнта з іншими частинами системи здійснюється виключно через REST API, реалізоване на сервері за допомогою FastAPI. Клієнт відправляє запити для отримання інформації про спостереження, події, профіль користувача, підтвердження обробки астрометрії, а також для надсилання нових фото. 
Крім бекенду, фронтенд опосередковано взаємодіє з зовнішнім API Astrometry.net, надсилаючи зображення, отримуючи ідентифікатор роботи, та регулярно перевіряючи стан обробки зображення. Цей процес винесено в окремий асинхронний механізм, який дозволяє слідкувати за результатом у режимі реального часу.

3.6 Підтримка інтернаціоналізації у веб-клієнті програмної системи

Система підтримує багатомовність інтерфейсу через інтеграцію бібліотеки i18next. Всі текстові ресурси винесені у JSON-файли з перекладами, що дозволяє зручно додавати нові мови та перемикати поточну мову через інтерфейс.
Користувач має можливість обрати мову у відповідному пункті меню, і всі компоненти автоматично оновлюються без перезавантаження. Поточна мова зберігається у локальному сховищі, щоб зберігати вибір навіть після повторного входу.

3.7 Адміністрування програмної системи у веб-клієнті

Адміністративна функціональність вбудована у веб-клієнт у вигляді окремих компонентів, які з’являються лише у користувачів з роллю «admin». Вони дозволяють переглядати непідтверджені спостереження, переглядати результати обробки, а також підтверджувати або відхиляти їх.
Ці компоненти мають власну маршрутизацію, захищену від несанкціонованого доступу, та окрему логіку взаємодії з API. Усі критичні дії супроводжуються попередженнями або підтвердженнями, щоб уникнути помилок при адмініструванні даних. 

 
4 ВИСНОВКИ


В результаті виконання даної лабораторної роботи було розроблено архітектуру та веб-інтерфейс проекту за темою: «Програмна система для збору, обробки та поширення астрономічних спостережень». Розроблено користувацький інтерфейс, який підтримує інтернаціоналізацію та локалізацію. Забезпечено управління користувачами системи, управління даними системи, створення резервних копій налаштувань та даних, експорт даних. Скріншоти інтерфейсу наведені в Додатку Г.


	  
ДОДАТОК А
Відеозапис


	Відеозапис на YouTube: https://youtu.be/f7z-HxtLDXk 
     	Хронологічний опис відеозапису:
00:00 - Вступ
00:54 - Головна сторінка
01:41 - Тестування реєстрації
02:15 - Тестування логіну
02:29 - Дошка (до активності)
02:56 - Профіль користувача
03:04 - Редагування профілю
03:40 - Тестування астрометрії
05:12 - Спостереження в профілі
05:45 - Редагування спостереження
06:00 - Тестування пошуку
07:08 - Галерея
07:28 - Астрономічні події
08:10 - Дошка (після активності) 
	



 
ДОДАТОК Б
Графічні матеріали


 
Рисунок Б.1 – ER-діаграма даних

 
Рисунок Б.2 – UML-діаграма діяльності (астрометрія)

 
Рисунок Б.3 – UML-діаграма прецедентів

 
Рисунок Б.4 – UML-діаграма компонентів

 
ДОДАТОК В
Програмний код


В.1 App.jsx
GitHub репозиторій: https://github.com/NureShevchenkoOlesia/apz-pzpi-22-8-shevchenko-olesia/blob/9f9b43368b15b196aadbc5f32cd1b56b72bde25f/Lab3/pzpi-22-8-shevchenko-olesia-lab3/src/App.jsx   
1  import './App.css'
2  import './styles/tailwind.css';
3  import { BrowserRouter as Router, Routes, Route } from "react-router-dom"
4  import Home from "./pages/home"
5  import Register from './pages/Register';
6  import Login from "./pages/Login";
7  import Dashboard from './pages/Dashboard';
8  import MainLayout from "./layout/MainLayout"
9  import Profile from './pages/Profile';
10  import EditProfile from './pages/EditProfile';
11  import UploadObservation from './pages/UploadObservation';
12  import SearchPage from './pages/SearchPage';
13  import UserProfile from './pages/UserProfile';
14  import Gallery from './pages/Gallery';
15  import EventsPage from './pages/EventsPage';
16  import EditObservationPage from './pages/EditObservationPage';
17  import ForgotPassword from "./pages/ForgotPassword";
18  import ResetPassword from "./pages/ResetPassword";
19  
20  function App() {
21    return (
22      <Router>
23        <MainLayout>
24          <Routes>
25            <Route path="/" element={<Home />} />
26            <Route path="/register" element={<Register />} />
27            <Route path="/login" element={<Login />} />
28            <Route path="/dashboard" element={<Dashboard />} />
29            <Route path="/profile" element={<Profile />} />
30            <Route path="/edit-profile" element={<EditProfile />} />
31            <Route path="/upload" element={<UploadObservation />} />
32            <Route path="/search" element={<SearchPage />} />
33            <Route path="/users/:userId" element={<UserProfile />} />
34            <Route path="/gallery" element={<Gallery />} />
35            <Route path="/astronomical-events" element={<EventsPage />} />
36            <Route path="/observations/:id/edit" element={<EditObservationPage />} />
37            <Route path="/forgot-password" element={<ForgotPassword />} /> 
38            <Route path="/reset-password" element={<ResetPassword />} />
39          </Routes>
40        </MainLayout>
41      </Router>
42    )
43  }
44  
45  export default App  

	В.2 tailwind.config.js
GitHub репозиторій: https://github.com/NureShevchenkoOlesia/apz-pzpi-22-8-shevchenko-olesia/blob/9f9b43368b15b196aadbc5f32cd1b56b72bde25f/Lab3/pzpi-22-8-shevchenko-olesia-lab3/tailwind.config.js 
1  export default {
2    content: [
3      "./index.html",
4      "./src/**/*.{js,ts,jsx,tsx}",
5    ],
6    theme: {
7      extend: {
8        fontFamily: {
9          proza: ['"Proza Libre"', 'sans-serif'],
10          arial: ['Arial', 'sans-serif'],
11        },
12      },
13    },
14    plugins: [],
15  }

В.3 Обробка геоданих
GitHub репозиторій: https://github.com/NureShevchenkoOlesia/apz-pzpi-22-8-shevchenko-olesia/blob/a8c6f79732fb1d44cdbf2eecae92c3257000ac77/Lab2/pzpi-22-8-shevchenko-olesia-lab2/api/utils/geolocation.py 
1  async def geocode_place_name(place_name: str):
2      async with httpx.AsyncClient() as client:
3          response = await client.get(
4              "https://nominatim.openstreetmap.org/search",
5              params={"q": place_name, "format": "json", "limit": 1},
6              headers={"User-Agent": "CosmorumAstroApp"}
7          )
8  
9          try:
10              data = response.json()
11          except Exception:
12              return None, None
13  
14          if data:
15              return float(data[0]["lat"]), float(data[0]["lon"])
16          return None, None

В.4 i12n.js
GitHub репозиторій: https://github.com/NureShevchenkoOlesia/apz-pzpi-22-8-shevchenko-olesia/blob/9f9b43368b15b196aadbc5f32cd1b56b72bde25f/Lab3/pzpi-22-8-shevchenko-olesia-lab3/src/i18n.js 
1  import i18n from "i18next";
2  import { initReactI18next } from "react-i18next";
3  import LanguageDetector from "i18next-browser-languagedetector";
4  
5  import translationEN from './locales/en/translation.json';
6  import translationUK from './locales/uk/translation.json';
7  
8  i18n
9    .use(LanguageDetector)
10    .use(initReactI18next)
11    .init({
12      fallbackLng: localStorage.getItem('lang') || 'en',
13      debug: false,
14      interpolation: {
15        escapeValue: false,
16      },
17      resources: {
18        en: { translation: translationEN },
19        uk: { translation: translationUK }
20      },
21      detection: {
22        order: ['localStorage', 'navigator'],
23        caches: ['localStorage'],
24      }
25    });
26  
27  export default i18n;


В.5 Профіль користувача
GitHub репозиторій: https://github.com/NureShevchenkoOlesia/apz-pzpi-22-8-shevchenko-olesia/blob/9f9b43368b15b196aadbc5f32cd1b56b72bde25f/Lab3/pzpi-22-8-shevchenko-olesia-lab3/src/pages/Profile.jsx 
1  import { useEffect, useState } from "react";
2  import { useNavigate } from "react-router-dom";
3  import { useTranslation } from "react-i18next";
4  
5  export default function Profile() {
6      const [profile, setProfile] = useState(null);
7      const navigate = useNavigate();
8      const [observations, setObservations] = useState([]);
9      const [selectedObservation, setSelectedObservation] = useState(null);
10      const [isModalOpen, setIsModalOpen] = useState(false);
11      const [showObjects, setShowObjects] = useState(false);
12      const { t } = useTranslation();
13  
14      useEffect(() => {
15          const fetchProfile = async () => {
16              const token = localStorage.getItem("token");
17              const profileRes = await fetch("http://localhost:8000/users/me", {
18                  headers: {
19                      Authorization: `Bearer ${token}`,
20                  },
21              });
22              const profileData = await profileRes.json();
23              setProfile(profileData);
24  
25              const obsRes = await fetch("http://localhost:8000/users/me/observations", {
26                  headers: {
27                      Authorization: `Bearer ${token}`,
28                  },
29              });
30              const obsData = await obsRes.json();
31              setObservations(obsData);
32          };
33  
34          fetchProfile();
35      }, []);
36  
37      const handleDelete = async (id) => {
38          if (!window.confirm("Are you sure you want to delete this observation?")) return;
39  
40          try {
41              const token = localStorage.getItem("token");
42              const res = await fetch(`http://localhost:8000/observations/${id}`, {
43                  method: "DELETE",
44                  headers: {
45                      Authorization: `Bearer ${token}`,
46                  },
47              });
48  
49              if (res.ok) {
50                  alert("Observation deleted!");
51                  setObservations((prev) => prev.filter((obs) => obs.id !== id));
52              } else {
53                  const data = await res.json();
54                  alert("Failed to delete: " + (data.detail || "Unknown error"));
55              }
56          } catch (error) {
57              console.error("Delete error:", error);
58              alert("Something went wrong. Check the console.");
59          }
60      };
61  
62      const openModal = (observation) => {
63          setSelectedObservation(observation);
64          setIsModalOpen(true);
65      };
66  
67      const closeModal = () => {
68          setSelectedObservation(null);
69          setIsModalOpen(false);
70      };
71  
72      if (!profile) return <div className="text-white p-10">There's nothing for you, baby.</div>;
73  
74      return (
75          <div className="min-h-screen bg-black font-serif text-white px-6 py-10">
76            <div className="flex justify-between items-center mb-10 ml-10">
77              <div className="flex items-center space-x-6">
78                <img
79                  src={profile.avatar_url ? profile.avatar_url : "/photos/home/default-avatar.jpg"}
80                  alt="Avatar"
81                  className="w-28 h-28 rounded-full object-cover border-4 border-white"
82                />
83                <div>
84                  <h2 className="text-3xl text-left font-serif font-semibold">{profile.username}</h2>
85                  <p className="text-white/70 text-left mt-2">{profile.bio || ""}</p>
86                  <div className="mt-4 text-sm text-white/50">
87                    <span className="mr-6">
88                      <strong className="text-white">{profile.observation_count || 0}</strong> {t("profile.observationsCount")}
89                    </span>
90                    <span>
91                      <strong className="text-white">🌌</strong> star baby
92                    </span>
93                  </div>
94                </div>
95              </div>
96      
97              <button
98                onClick={() => navigate("/edit-profile")}
99                className="bg-black\\1 text-yellow px-3 py-1 mr-10 rounded-lg font-serif hover:bg-yellow-500 transition h-fit"
100              >
101                {t("profile.edit")}
102              </button>
103            </div>
104      
105            <hr className="border-white/10 my-6" />
106  
107            <div className="flex justify-between items-center mb-6">
108          <h3 className="text-2xl ml-10 font-serif font-semibold">{t("profile.myObservations")}</h3>
109          <button
110            onClick={() => navigate("/upload")}
111            className="bg-black\\1 text-yellow px-3 py-1 mr-10 rounded-lg font-serif hover:bg-yellow-500 transition"
112          >
113            {t("profile.addObservation")}
114          </button>
115        </div>
116        <div className="grid grid-cols-1 md:grid-cols-4 gap-x-5 ml-10 mr-10">
117          {observations.map((obs) => (
118            <div
119              key={obs.id}
120              className="bg-zinc-900 p-4 w-80 rounded-xl shadow-md flex flex-col items-center hover:shadow-lg transition cursor-pointer"
121              onClick={() => openModal(obs)}
122            >
123              <img
124                src={obs.image_url}
125                alt={obs.title}
126                className="w-full h-40 object-cover rounded-md mb-4"
127              />
128              <h4 className="text-lg font-serif font-semibold text-center mb-2">{obs.title}</h4>
129  
130              <div className="flex space-x-4">
131                <button
132                  onClick={() => {
133                    if (obs?.id) navigate(`/observations/${obs.id}/edit`);
134                  }}
135                  className="text-xs px-4 py-1 bg-white text-black rounded-lg hover:bg-yellow-300 transition"
136                >
137                  {t("profile.edit")}
138                </button>
139                <button
140                  onClick={() => handleDelete(obs.id)}
141                  className="text-xs px-3 py-1 text-red-600 border-red-600 rounded-lg hover:bg-white-600 transition"
142                >
143                  {t("profile.delete")}
144                </button>
145              </div>
146            </div>
147          ))}
148        </div>
149        {isModalOpen && selectedObservation && (
150          <div
151            className="fixed inset-0 bg-black/70 flex items-center justify-center z-50"
152            onClick={closeModal}
153          >
154            <div
155              onClick={(e) => e.stopPropagation()}
156              className="bg-zinc-900 p-6 rounded-lg max-h-[80vh] overflow-y-auto w-full max-w-4xl flex flex-col md:flex-row gap-8"
157            >
158              <img
159                src={selectedObservation.image_url}
160                alt={selectedObservation.title}
161                className="w-full md:w-1/2 h-auto rounded-lg object-cover"
162              />
163  
164              <div className="flex flex-col text-left w-full">
165                <div>
166                  <h2 className="text-2xl font-serif font-bold mb-4">{selectedObservation.title}</h2>
167                  <p className="text-white/70 mb-6">{selectedObservation.description || ""}</p>
168                  <div className="text-sm text-white/60 mb-4">
169                    <h4 className="font-semibold mb-2">{t("profile.calibration")}</h4>
170                    {selectedObservation.calibration
171                      ? Object.entries(selectedObservation.calibration).map(([key, value]) => (
172                          <div key={key}>{key}: {value}</div>
173                        ))
174                      : t("profile.noCalibration")}
175                  </div>
176  
177                  <div className="text-sm text-white/60">
178                    <h4
179                      className="font-semibold mb-2 cursor-pointer hover:underline"
180                      onClick={() => setShowObjects(!showObjects)}
181                    >
182                      {showObjects
183                        ? t("profile.hideObjects")
184                        : `${t("profile.showObjects")} (${selectedObservation.objects_in_field?.length || 0})`}
185                    </h4>
186                    {showObjects && (
187                      <div className="max-h-32 overflow-y-auto pr-2">
188                        {selectedObservation.objects_in_field?.length ? (
189                          selectedObservation.objects_in_field.map((obj, idx) => (
190                            <div key={idx}>{obj.name}</div>
191                          ))
192                        ) : (
193                          <p>{t("profile.noObjects")}</p>
194                        )}
195                      </div>
196                    )}
197                  </div>
198  
199                  {selectedObservation.location?.place_name && (
200                    <div className="text-base italic text-white/75 mt-5">
201                      <strong>{t("profile.location")}:</strong> {selectedObservation.location.place_name}
202                    </div>
203                  )}
204                </div>
205  
206                <div className="mt-6">
207                  <button
208                    onClick={closeModal}
209                    className="w-full mt-5 px-6 py-1 border-white text-white font-serif rounded-lg hover:bg-yellow-600 transition"
210                  >
211                    {t("profile.close")}
212                  </button>
213                </div>
214              </div>
215            </div>
216          </div>
217        )}
218      </div>
219    );
220  }

	В.6 Публікація спостереження після астрометрії
GitHub репозиторій: https://github.com/NureShevchenkoOlesia/apz-pzpi-22-8-shevchenko-olesia/blob/9f9b43368b15b196aadbc5f32cd1b56b72bde25f/Lab3/pzpi-22-8-shevchenko-olesia-lab3/src/pages/UploadObservation.jsx 
1  import { useState } from "react";
2  import { useNavigate } from "react-router-dom";
3  import { useTranslation } from "react-i18next";
4  
5  export default function UploadAndEditObservation() {
6    const [file, setFile] = useState(null);
7    const [loading, setLoading] = useState(false);
8    const [observation, setObservation] = useState(null);
9    const [title, setTitle] = useState("");
10    const [description, setDescription] = useState("");
11    const [objectsInField, setObjectsInField] = useState([]);
12    const [showObjects, setShowObjects] = useState(false);
13    const { t } = useTranslation();
14  
15    const navigate = useNavigate();
16  
17    const handleFileChange = (e) => {
18      setFile(e.target.files[0]);
19    };
20  
21    const handleUpload = async (e) => {
22      e.preventDefault();
23  
24      if (!file) {
25        alert("Please select a file first!");
26        return;
27      }
28  
29      const formData = new FormData();
30      formData.append("file", file);
31  
32      try {
33        setLoading(true);
34        const res = await fetch("http://localhost:8000/upload", {
35          method: "POST",
36          body: formData,
37        });
38  
39        let data;
40        if (res.ok) {
41          try {
42            data = await res.json();
43          } catch (err) {
44            const fallbackText = await res.text();
45            console.error("Failed to parse JSON:", err);
46            console.error("Response text:", fallbackText);
47            alert("Upload failed: Invalid response format.");
48            return;
49          }
50        } else {
51          const errorText = await res.text();
52          console.error("Server returned error:", res.status, errorText);
53          alert(`Upload failed: ${res.status}`);
54          return;
55        }
56  
57        if (res.ok) {
58          console.log("Astrometry solved:", data);
59          setObservation(data);
60          const objectsArray = data.objects_in_field?.objects_in_field || [];
61          setObjectsInField(
62            Array.isArray(objectsArray)
63              ? objectsArray.map((name) => ({
64                name: name.replace(/\)+$/, ""),
65                coordinates: "",
66              }))
67              : []
68          );
69        } else {
70          console.error("Upload failed:", data.detail || "Unknown error");
71          alert("Upload failed: " + (data.detail || "Unknown error"));
72        }
73      } catch (error) {
74        console.error("Upload error:", error);
75        alert("Something went wrong. Check the console.");
76      } finally {
77        setLoading(false);
78      }
79    };
80  
81    const handleAstronomyDataChange = (index, field, value) => {
82      const updatedObjects = [...objectsInField];
83      updatedObjects[index] = { ...updatedObjects[index], [field]: value };
84      setObjectsInField(updatedObjects);
85    };
86  
87    const handleSubmit = async (e) => {
88      e.preventDefault();
89      if (!observation) return;
90  
91      const payload = {
92        title,
93        description,
94        image_url: observation.image_url,
95        calibration: observation.calibration,
96        objects_in_field: objectsInField,
97        location: observation.location,
98      };
99  
100      try {
101        if (
102          !payload.location ||
103          typeof payload.location.latitude !== "number" ||
104          isNaN(payload.location.latitude) ||
105          typeof payload.location.longitude !== "number" ||
106          isNaN(payload.location.longitude)
107        ) {
108          alert("Please provide valid latitude and longitude.");
109          return;
110        }      
111        const res = await fetch("http://localhost:8000/observations/confirm", {
112          method: "POST",
113          headers: {
114            "Content-Type": "application/json",
115            Authorization: `Bearer ${localStorage.getItem("token")}`,
116          },
117          body: JSON.stringify(payload),
118        });
119        const data = await res.json();
120        if (res.ok) {
121          alert("Observation published successfully!");
122          navigate("/profile");
123        } else {
124          console.error("Save failed:", data.detail || "Unknown error");
125          if (Array.isArray(data.detail)) {
126            const errorMessages = data.detail.map(err => {
127              const loc = err.loc ? err.loc.join(" > ") : "";
128              return `${loc}: ${err.msg}`;
129            }).join("\n");
130            alert("Save failed:\n" + errorMessages);
131          } else {
132            alert("Save failed: " + (data.detail || "Unknown error"));
133          }
134        }
135      } catch (error) {
136        console.error("Save error:", error);
137        alert("Something went wrong. Check the console.");
138      }
139    };
140  
141    return (
142      <div className="min-h-screen bg-black text-white flex flex-col font-serif items-center justify-center px-6 py-10">
143        <h1 className="text-3xl font-serif font-semibold mb-4">
144          {t("prepareObservation.title")}
145        </h1>
146        <h3 className="text-sm font-serif mb-8">
147          {t("prepareObservation.subtitle")}
148        </h3>
149  
150        {!observation ? (
151          <form
152            onSubmit={handleUpload}
153            className="w-full max-w-md flex flex-col space-y-6"
154          >
155            <input
156              type="file"
157              accept="image/*"
158              onChange={handleFileChange}
159              className="w-full mx-auto text-white file:bg-yellow-400 file:text-black file:px-2 file:py-2 file:rounded file:border-0 hover:file:bg-yellow-300"
160            />
161            <button
162              type="submit"
163              disabled={loading}
164              className="bg-white text-black py-2 rounded-lg font-medium hover:bg-gray-200 transition"
165            >
166              {loading ? t("prepareObservation.analyzing") : t("prepareObservation.uploadAnalyze")}
167            </button>
168          </form>
169        ) : (
170          <form onSubmit={handleSubmit} className="w-full max-w-2xl space-y-6">
171            <img
172              src={observation.image_url}
173              alt={t("prepareObservation.uploadedImageAlt")}
174              className="rounded-xl shadow-lg mx-auto w-64"
175            />
176  
177            <div>
178              <label className="block mb-1 text-sm">{t("prepareObservation.titleLabel")}</label>
179              <input
180                type="text"
181                value={title}
182                onChange={(e) => setTitle(e.target.value)}
183                required
184                className="w-full px-4 py-2 rounded-lg bg-white/10 text-white placeholder-white/60 border border-white/20 backdrop-blur-md focus:outline-none"
185                placeholder={t("prepareObservation.titlePlaceholder")}
186              />
187            </div>
188  
189            <div>
190              <label className="block mb-1 text-sm">{t("prepareObservation.descriptionLabel")}</label>
191              <textarea
192                value={description}
193                onChange={(e) => setDescription(e.target.value)}
194                rows="4"
195                className="w-full px-4 py-2 rounded-lg bg-white/10 text-white placeholder-white/60 border border-white/20 backdrop-blur-md focus:outline-none"
196                placeholder={t("prepareObservation.descriptionPlaceholder")}
197              ></textarea>
198            </div>
199  
200            {/* Calibration Section */}
201            <div>
202              <label className="block mb-2 text-base">{t("prepareObservation.calibrationData")}</label>
203              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-2">
204                {Object.keys(observation.calibration || {}).map((key) => (
205                  <div key={key}>
206                    <label className="block text-xs mb-1 capitalize">{key}</label>
207                    <input
208                      type="number"
209                      step="any"
210                      value={observation.calibration[key]}
211                      onChange={(e) => {
212                        setObservation((prev) => ({
213                          ...prev,
214                          calibration: {
215                            ...prev.calibration,
216                            [key]: parseFloat(e.target.value),
217                          },
218                        }));
219                      }}
220                      className="w-full px-4 py-2 rounded-lg bg-white/10 text-white placeholder-white/60 border border-white/20 backdrop-blur-md focus:outline-none"
221                    />
222                  </div>
223                ))}
224              </div>
225            </div>
226  
227            {/* Objects Section */}
228            <div>
229              <label className="block mb-2 text-base">{t("prepareObservation.objectsInField")}</label>
230              <button
231                type="button"
232                onClick={() => setShowObjects(!showObjects)}
233                className="mb-4 bg-yellow-400 text-black px-4 py-1 rounded-lg hover:bg-yellow-300 transition"
234              >
235                {showObjects
236                  ? t("prepareObservation.hideObjects")
237                  : t("prepareObservation.showObjects", { count: objectsInField.length })}
238              </button>
239  
240              {showObjects &&
241                objectsInField.map((object, index) => (
242                  <div key={index} className="space-y-4 mb-4">
243                    <div>
244                      <label className="block text-xs mb-1">
245                        {t("prepareObservation.objectLabel", { number: index + 1 })}
246                      </label>
247                      <input
248                        type="text"
249                        value={object.name || ""}
250                        onChange={(e) =>
251                          handleAstronomyDataChange(index, "name", e.target.value)
252                        }
253                        placeholder={t("prepareObservation.objectPlaceholder")}
254                        className="w-full px-2 py-2 rounded-lg bg-white/10 text-white placeholder-white/60 border border-white/20 backdrop-blur-md focus:outline-none"
255                      />
256                    </div>
257                  </div>
258                ))}
259            </div>
260  
261            {/* Location Section */}
262            <div>
263              <label className="block mb-2 text-base">{t("prepareObservation.locationLabel")}</label>
264              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
265                {/* Latitude */}
266                <input
267                  type="text"
268                  placeholder={t("prepareObservation.latitudePlaceholder")}
269                  className="w-full px-4 py-2 rounded-lg bg-white/10 text-white"
270                  onChange={(e) =>
271                    setObservation((prev) => ({
272                      ...prev,
273                      location: {
274                        ...(prev.location || {}),
275                        latitude: parseFloat(e.target.value),
276                      },
277                    }))
278                  }
279                />
280  
281                {/* Longitude */}
282                <input
283                  type="text"
284                  placeholder={t("prepareObservation.longitudePlaceholder")}
285                  className="w-full px-4 py-2 rounded-lg bg-white/10 text-white"
286                  onChange={(e) =>
287                    setObservation((prev) => ({
288                      ...prev,
289                      location: {
290                        ...(prev.location || {}),
291                        longitude: parseFloat(e.target.value),
292                      },
293                    }))
294                  }
295                />
296  
297                {/* Place Name */}
298                <input
299                  type="text"
300                  placeholder={t("prepareObservation.placeNamePlaceholder")}
301                  className="w-full px-4 py-2 rounded-lg bg-white/10 text-white col-span-2"
302                  onChange={(e) =>
303                    setObservation((prev) => ({
304                      ...prev,
305                      location: {
306                        ...(prev.location || {}),
307                        place_name: e.target.value,
308                      },
309                    }))
310                  }
311                />
312              </div>
313            </div>
314  
315            <button
316              type="submit"
317              className="bg-white text-black px-6 py-2 rounded-lg font-medium hover:bg-gray-200 transition"
318            >
319              {t("prepareObservation.publish")}
320            </button>
321          </form>
322        )}
323      </div>
324    );
325  } 
ДОДАТОК Г
Скріншоти інтерфейсу веб-клієнта
 
 
Рисунок Г.1 – Головна сторінка

 
Рисунок Г.2 – Сторінка реєстрації

 
Рисунок Г.3 – Сторінка авторизації

 
Рисунок Г.4 – Сторінка відновлення паролю

 
Рисунок Г.5 – Дошка

 
Рисунок Г.6 – Профіль користувача

 
Рисунок Г.7 – Сторінка редагування профілю

 
Рисунок Г.8 – Сторінка завантаження спостережень

 
Рисунок Г.9 – Сторінка підготовки спостережень

 
Рисунок Г.10 – Сторінка редагування спостережень

 
Рисунок Г.11 – Модульне вікно спостереження

 
Рисунок Г.12 – Сторінка пошуку

 
Рисунок Г.13 – Сторінка подій

 
Рисунок Г.14 – Галерея
