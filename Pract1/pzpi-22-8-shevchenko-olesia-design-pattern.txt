Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії





Практична робота
з дисципліни «Архітектура програмного забезпечення»
на тему: «Шаблон (патерн) проектування «Strategy» (Стратегія)»





Виконала:
ст. гр. ПЗПІ-22-8
Шевченко О. О.
Перевірив:
ст. викл. Кафедри ПІ
Сокорчук І. П.




Харків 2025
1 ІСТОРІЯ ЗМІН


Даний розділ представляє історію внесених до звіту змін, які, в свою чергу, наведено в табл. 1.

Таблиця 1 – Історія змін
№	Дата	Версія звіту	 Опис змін та виправлень
1	01.05.2025	0.1	Створено звіт
			
 
2 ЗАВДАННЯ


Завданням для даної практичної роботи є підготовка доповіді на тему «Шаблон (патерн) проектування «Strategy» (Стратегія)». Для цього необхідно  провести дослідження щодо відповідного шаблону, дослідити основну ідею, структуру, приклади використання та виконати загальну оцінку, після чого створити і оформити слайди презентації доповіді. 
 
3 ОПИС ВИКОНАНОЇ РОБОТИ


	У процесі виконання практичної роботи було досліджено шаблон (патерн) проектування «Strategy» (Стратегія), який належить поведінкового типу шаблонів проектування і який пропонує визначити сімейство схожих алгоритмів, які часто змінюються або розширюються, й винести їх до власних класів, які називають стратегіями. Таким чином, замість того, щоб початковий клас сам виконував той чи інший алгоритм, він відіграватиме роль контексту, посилаючись на одну зі стратегій та делегуючи їй виконання роботи. Щоб змінити алгоритм, вам буде достатньо підставити в контекст інший об’єкт-стратегію.
	Шаблон Стратегія складається з чотирьох елементів: контекст, клієнт, стратегія, конкретні стратегії (рис. 1).

 
Рисунок 1 – Структура шаблону Стратегія

	Після виконання дослідження було зроблено висновки, що за своїм призначенням даний шаблон є корисним, коли:
–	є необхідність використовувати різні варіації якого-небудь алгоритму всередині одного об’єкта;
–	є багато схожих класів, які відрізняються лише деякою поведінкою;
–	різні варіації алгоритмів реалізовано у вигляді розлогого умовного оператора.
В свою чергу, перевагами даного шаблону є швидкість заміни алгоритмів, ізоляція коду та заміна спадкування делегуванням. До недоліків відносяться  ускладнення програми та необхідність додаткових знань у клієнта. 
Додатково було реалізовано приклади на мові програмування C#: реалізація оплати та стиснення файлів різними способами. 
 
4 ВИСНОВКИ


	Під час виконання практичної роботи було підготовлено доповідь на тему «Шаблон (патерн) проектування «Strategy» (Стратегія)». Виконано дослідження теми, створено та оформлено презентацію для доповіді.
 
ДОДАТОК А


Відеозапис доповіді на YouTube: https://youtu.be/JPBBxfyGAiI 
00:00 Вступ: представлення теми та доповідача
00:30 Опис шаблону Стратегія: визначення та основна ідея обраного шаблону проектування
01:27 Опис структури шаблону Стратегія
02:03 Перший приклад використання шаблону Стратегія
02:52 Другий приклад використання шаблону Стратегія
03:15 Опис переваг шаблону Стратегія
03:38 Опис недоліків шаблону Стратегія
03:55 Опис використання шаблону Стратегія в різних сферах IT
04:41 Визначення умов застосування шаблону Стратегія
04:52 Висновки
 
ДОДАТОК Б
Слайди презентації доповіді


 
Рисунок Б.1 – Титульна сторінка

 
Рисунок Б.2 – Зміст презентації
 
Рисунок Б.3 – Визначення шаблону Стратегія

 
Рисунок Б.4 – Основна ідея шаблону Стратегія

 
Рисунок Б.5 – Структура шаблону Стратегія

 
Рисунок Б.6 – Перший приклад використання шаблону Стратегія

 
Рисунок Б.7 – Другий приклад використання шаблону Стратегія

 
Рисунок Б.8 – Переваги шаблону Стратегія

 
Рисунок Б.9 – Недоліки шаблону Стратегія

 
Рисунок Б.10 – Використання шаблону Стратегія

 
Рисунок Б.11 – Умови застосування шаблону Стратегія

 
Рисунок Б.12 – Висновки щодо корисності та застосування шаблону Стратегія
 
ДОДАТОК В
Програмний код


1  // Інтерфейс стратегії
2  interface PaymentStrategy {
3      void pay(int amount);
4  }
5  
6  // Реалізація для оплати кредитною карткою
7  class CreditCardPayment implements PaymentStrategy {
8      public void pay(int amount) {
9          System.out.println("Оплата кредитною карткою:"+amount+" грн");
10      }
11  }
12  
13  // Реалізація для PayPal
14  class PayPalPayment implements PaymentStrategy {
15      public void pay(int amount) {
16          System.out.println("Оплата через PayPal: " + amount +" грн");
17      }
18  }
19  
20  // Контекст
21  class PaymentContext {
22      private PaymentStrategy strategy;
23      public void setStrategy(PaymentStrategy strategy) {
24          this.strategy = strategy;
25      }
26      public void executePayment(int amount) {
27          strategy.pay(amount);
28      }
29  }
30  
31  interface CompressionStrategy {
32      void compress(String fileName);
33  }
34  
35  class ZipCompression implements CompressionStrategy {
36      public void compress(String fileName) {
37          System.out.println("Стиснення файлу у формат ZIP:"+fileName);
38      }
39  }
40  
41  class RarCompression implements CompressionStrategy {
42      public void compress(String fileName) {
43          System.out.println("Стиснення файлу у формат RAR:"+fileName);
44      }
45  }
46  
47  class CompressionContext {
48      private CompressionStrategy strategy;
49      public void setStrategy(CompressionStrategy strategy) {
50          this.strategy = strategy;
51      }
52      public void executeCompression(String fileName) {
53          strategy.compress(fileName);
54      }
55  }
