Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра програмної інженерії




Лабораторна робота №5
з дисципліни «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури, створення та відлагодження програмного застосунку мобільного пристрою для програмної системи»




Виконала:
ст. гр. ПЗПІ-22-8
Шевченко О. О.
Перевірив:
ст. викл. кат. ПІ
Сокорчук І. П.





Харків 2025
1	ІСТОРІЯ ЗМІН


Назва	Дата	Причина змін	Версія
Cosmorum	30.05.2025	Сформовано завдання	Version 1.0
Cosmorum	31.05.2025	Описано виконану роботу	Version 1.0
 

2	ЗАВДАННЯ


Продемонструвати повний процес розгортання проекту за темою: «Програмна система для збору, обробки та поширення астрономічних спостережень». Описати розгортання веб- та мобайл- клієнтів системи, необхідних залежностей, налаштування конфігурації файлів, створення та ініціалізацію бази даних та запуск усіх компонентів системи. 

 
3  ОПИС ВИКОНАНОЇ РОБОТИ
3.1	 Загальна архітектура системи та компоненти для розгортання 


Система «Cosmorum» є розподіленим багатокомпонентним програмним продуктом, побудованим за клієнт-серверною архітектурною моделлю. До її складу входять серверна частина (бекенд), веб-клієнт та мобільний застосунок. Кожен із цих компонентів функціонує як самостійний модуль, що взаємодіє з іншими через HTTP-протокол, використовуючи REST API. Основною базою даних системи є MongoDB, що зберігає інформацію про користувачів, спостереження, астрономічні події та інші сутності. Бекенд реалізовано за допомогою FastAPI, що забезпечує швидку обробку запитів, просту інтеграцію з базами даних і вбудовану документацію. Веб-клієнт написаний на React, орієнтований на настільні браузери, і забезпечує взаємодію з користувачем через зручний графічний інтерфейс. Мобільний клієнт розроблений на Kotlin для платформи Android і має спрощений, але повноцінний функціонал. Усі компоненти зберігаються в окремих директоріях одного репозиторію на GitHub, що спрощує їхнє розгортання та супровід. 

3.2	 Розгортання серверної частини системи 

Розгортання серверної частини передбачає налаштування середовища, встановлення залежностей, підключення до бази даних та запуск API-сервера. Перш за все, користувачеві необхідно клонувати проєкт із репозиторію за адресою та перейти до директорії, що містить код бекенду. Основні налаштування системи зберігаються у файлі .env, який має бути створений вручну та містити конфіденційні параметри, такі як адреса MongoDB, API-ключ для сервісу надсилання електронної пошти (SendGrid), адреса клієнта та інше. Для ізоляції залежностей рекомендується використовувати віртуальне середовище Python. Після активації середовища виконується встановлення необхідних бібліотек із файлу requirements.txt. Запуск серверної частини здійснюється за допомогою інструмента uvicorn, який запускає FastAPI-додаток. Сервер стає доступним за локальною адресою та портом, визначеним у конфігурації. У разі продакшн-розгортання можливе використання Docker-контейнера, що забезпечує стандартизоване середовище для запуску та спрощує масштабування. Усі API-ендпоінти системи автоматично документуються й доступні для перевірки через інтерфейс Postman.  

3.3 Розгортання веб-клієнта системи 

	Веб-клієнт системи є окремим фронтенд-застосунком, який функціонує автономно та взаємодіє з бекендом через HTTP-запити. Після клонування репозиторію користувач має перейти до директорії веб-клієнта та встановити всі залежності через менеджер пакетів Node.js. Веб-застосунок використовує змінні середовища для визначення адреси API-сервера, тож необхідно створити відповідний конфігураційний файл .env, у якому буде вказано URL до бекенду. Після цього виконується запуск у режимі розробки, у якому клієнт відкривається у браузері за типовою адресою. Для продакшн-режиму можливе створення зібраної версії застосунку, яка може бути розміщена на сервері або у Docker-контейнері. Веб-клієнт має повноцінний функціонал: реєстрація та вхід, перегляд і створення спостережень, керування профілем, підписка на події. Стан додатка керується через React state-хуки, а стилізація – через Tailwind CSS або кастомізовані стилі.

3.4 Розгортання мобільного застосунку системи

Мобільний клієнт системи розроблено на Kotlin у середовищі Android Studio. Його запуск вимагає відкриття проєкту у відповідній IDE, встановлення емулятора або підключення фізичного пристрою та налаштування API-адреси, за якою мобільний застосунок буде звертатися до бекенду. На етапі налаштування особливу увагу слід звернути на правильність URL-адреси – для емуляторів Android Studio використовується спеціальний локальний IP-адрес, що імітує підключення до хост-машини. Після цього застосунок компілюється та запускається безпосередньо на пристрої. Застосунок реалізує базовий набір функцій: автентифікацію, перегляд та створення спостережень, перегляд астрономічних подій і керування підписками. Всі HTTP-запити здійснюються через Retrofit, а навігація організована за допомогою Android Navigation Component. Застосунок також підтримує локальне збереження токена доступу для автоматичної авторизації користувача.  

3.5 Налаштування взаємодії між компонентами системи

Усі компоненти системи працюють у координації через HTTP-запити до єдиного API-сервера. Для правильної роботи важливо забезпечити узгодженість налаштувань URL-адреси бекенду у веб- та мобільному клієнті. У конфігураційних файлах клієнтів має бути вказана актуальна адреса серверної частини з урахуванням порту та протоколу. База даних MongoDB має бути доступною зсередини серверного середовища, незалежно від того, запускається вона локально чи у Docker-контейнері. У разі використання Docker-композиції всі сервіси можуть бути об'єднані в одну мережу, що спрощує налаштування адрес. Надсилання листів здійснюється через інтеграцію з сервісом SendGrid, для чого у .env-файлі необхідно вказати дійсний API-ключ. Крім цього, веб-клієнт має бути доступним за зовнішньою адресою, яка вказується у конфігурації бекенду для генерації коректних посилань у листах (наприклад, для підтвердження email або скидання паролю).

3.6 Тестування функціональності системи після розгортання

Після завершення розгортання всіх компонентів необхідно провести інтеграційне тестування, щоб переконатися в коректній роботі системи в цілому. Найперше слід перевірити доступність кожного модуля – бекенду, веб-інтерфейсу та мобільного застосунку. Для серверної частини це можна зробити через вбудовану Swagger-документацію, що дозволяє вручну протестувати всі основні ендпоінти. У веб-клієнті перевіряється можливість реєстрації, входу в систему, створення спостереження та підписки на події. У мобільному клієнті тестуються аналогічні сценарії, зокрема вхід та взаємодія з API. Окремо перевіряється робота електронної пошти, надсилання листів та відновлення доступу. У разі потреби тестування може проводитися як вручну, так і за допомогою автоматизованих тестів або Postman-колекцій. 

3.7 Інтернаціоналізація та локалізація системи 

Система «Cosmorum» підтримує інтернаціоналізацію та локалізацію інтерфейсу користувача. Веб-клієнт використовує бібліотеку react-i18next, яка дозволяє динамічно перемикати мову інтерфейсу без перезавантаження сторінки. Усі переклади зберігаються у форматі JSON-файлів, що розділені за мовами та організовані у відповідній директорії. Вибір мови здійснюється автоматично на основі мовних налаштувань браузера або вручну через інтерфейс користувача. Мобільний застосунок реалізує локалізацію за допомогою системних ресурсів Android, де в окремих каталогах зберігаються мовні файли strings.xml. Це забезпечує адаптацію застосунку до мови, встановленої на пристрої користувача. Бекенд наразі функціонує англійською мовою, однак його можна доповнити підтримкою декількох мов, зокрема для email-шаблонів, які відправляються на основі обраної мови користувача.  

 
4 ВИСНОВКИ


В результаті виконання даної лабораторної роботи було продемонстровано повний процес розгортання проекту за темою: «Програмна система для збору, обробки та поширення астрономічних спостережень». Описано розгортання веб- та мобільного клієнтів системи, необхідних залежностей, налаштування конфігурації файлів, створення та ініціалізацію бази даних та запуск усіх компонентів системи.  Конкретні команди для розгортання та фрагменти коду наведені в Додатку В. 


	  
ДОДАТОК А
Відеозапис


	Відеозапис на YouTube: https://youtu.be/EjmcfrLhpbI 
     	Хронологічний опис відеозапису:
00:00 - Вступ
00:33 - Розгортання серверної частини системи
01:47 - Розгортання веб-клієнта системи
02:45 - Розгортання мобайл-клієнта системи
03:45 - Налаштування взаємодії між компонентами
00:49 - Тестування системи
05:21 - Локалізація та інтернаціоналізація
05:33 - Висновки	



 
ДОДАТОК Б
Графічні матеріали


 
Рисунок Б.1 – ER-діаграма даних

 
Рисунок Б.2 – UML-діаграма діяльності (астрометрія)

 
Рисунок Б.3 – UML-діаграма прецедентів

 
Рисунок Б.4 – UML-діаграма компонентів (веб-застосунок)
 
Рисунок Б.5 – UML-діаграма компонентів (мобільний застосунок)


 
ДОДАТОК В
Розгортання програмної системи


В.1 Розгортання серверної частини системи
В.1.1 Клонування проєкту та перехід у серверну папку
1  git clone https://github.com/NureShevchenkoOlesia/apz-pzpi-22-8-shevchenko-olesia/tree/53669c18ac15bacbbf1695a691dea7f950500468/Lab5/pzpi-22-8-shevchenko-olesia-lab5/Server 
2  cd COSMORUM

В.1.2 Створення та активація віртуального середовища
1  python -m venv venv
2  source venv/bin/activate  # Windows: venv\Scripts\activate

В.1.3 Встановлення залежностей 
1  pip install -r requirements.txt

В.1.4 Створення .env файлу 
1  cp .env.example .env

В.1.5 Актуалізація змісту .env файлу 
1  SENDGRID_API_KEY=...
2  EMAIL_FROM=olesia.shevchenko245@gmail.com
3  FRONTEND_URL=http://localhost:5173
4  MOBILE_URL=http://localhost:8080

В.1.6 Запуск серверу у режимі розробки 
1  uvicorn main:app –-reload 

В.2 Розгортання веб-клієнта системи
В.2.1 Клонування проєкту та перехід у серверну папку
1  git clone https://github.com/NureShevchenkoOlesia/apz-pzpi-22-8-shevchenko-olesia/tree/53669c18ac15bacbbf1695a691dea7f950500468/Lab5/pzpi-22-8-shevchenko-olesia-lab5/Web-client 
2  cd cosmorum-frontend

В.2.2 Встановлення залежностей
1  npm install

В.2.3 Створення .env файлу 
1  cp .env.example .env 

В.2.4 Актуалізація змісту .env файлу (для Vite)
1  VITE_API_URL=http://localhost:8000

В.2.5 Запуск у режимі розробки 
1  npm run dev 

В.2.6 Перевірка запуску 
1  http://localhost:5173  

В.2.7 Конфігурація запитів (усі HTTP-запити мають використовувати змінну середовища VITE_API_URL) 
1  const API_URL = import.meta.env.VITE_API_URL; 

В.2.8 package.json
"scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
В.3 Розгортання мобільного клієнта системи
В.3.1 Клонування проєкту та перехід у серверну папку
1  git clone https://github.com/NureShevchenkoOlesia/apz-pzpi-22-8-shevchenko-olesia/tree/53669c18ac15bacbbf1695a691dea7f950500468/Lab5/pzpi-22-8-shevchenko-olesia-lab5/Mobile-client 
2  cd CosmorumMobile

В.2.2 Встановлення залежностей (якщо це не відбулося автоматично)
1  File → Sync Project with Gradle Files

В.2.3 ApiClient.kt
1  object ApiClient {
2      private const val BASE_URL = "http://10.0.2.2:8000/"
3  
4      val retrofit: Retrofit = Retrofit.Builder()
5          .baseUrl(BASE_URL)
6          .addConverterFactory(GsonConverterFactory.create())
7          .build()
8  }

В.2.4 Перевірка додаткових дозволів в AndroidManifest.xml
1  <uses-permission android:name="android.permission.INTERNET" />
2  android:configChanges="locale"

В.2.5 Запуск додатку  
1  Run → Run 'app'
