Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра програмної інженерії




Лабораторна робота №2
з дисципліни «Архітектура програмного забезпечення»
на тему: «Розширення серверної частини програмної системи»





Виконала:
ст. гр. ПЗПІ-22-8
Шевченко О. О.
Перевірив:
ст. викл. кат. ПІ
Сокорчук І. П.





Харків 2025
1	ІСТОРІЯ ЗМІН


Назва	Дата	Причина змін	Версія
Cosmorum	17.04.2025	Сформовано завдання	Version 1.0
Cosmorum	19.04.2025	Описано виконану роботу	Version 1.0
 

2	ЗАВДАННЯ


Розробити серверну частину проекту за темою: «Програмна система для збору, обробки та поширення астрономічних спостережень». Необхідно змоделювати програмну систему за темою «Програмна система для збору, обробки та поширення астрономічних спостережень». Спроектувати та описати базу даних програмної системи, побудувати серверні компоненти системи, описати специфікацію API.

 
3  ОПИС ВИКОНАНОЇ РОБОТИ


Даний розділ описує аналіз існуючих компонентів серверної частини системи Cosmorum та реалізацію ключових модулів. Система реалізована на основі клієнт-серверної архітектури, що забезпечує гнучке масштабування та чіткий поділ відповідальностей між компонентами. Архітектура включає:
	рівень представлення – клієнтський додаток, реалізований з використанням React;
	рівень API – сервер на базі FastAPI, який надає RESTful API для взаємодії з клієнтом;
	рівень бізнес-логіки – Python-сервіси, що обробляють запити, взаємодіють із базою даних та виконують алгоритмічну логіку (наприклад, перевірку прав доступу або обробку зображень);
	рівень доступу до даних – обробка операцій із MongoDB через бібліотеку motor (асинхронна робота з MongoDB);
	рівень зберігання даних – база даних MongoDB та об’єктне сховище для зберігання астрономічних зображень.
У бекенді реалізовано шаблон розділення обов’язків, що забезпечує масштабованість та зручність супроводу.

3.1	 Компоненти серверної частини

Серверна частина реалізує RESTful API за допомогою FastAPI. Основні маршрути згруповані за ресурсами:
	auth/ – автентифікація та реєстрація користувачів через логін/пароль;
	users/ – управління профілями користувачів, публічні сторінки та налаштування;
	observations/ – створення, перегляд, редагування, підтвердження та видалення спостережень, пов’язаних з астрономічними зображеннями;
	astrometry/ – відправлення зображень на обробку в Astrometry.net, повернення та збереження результатів;
	events/ – перегляд, імпорт та підписка на астрономічні події з бази NASA;
	subscription/ – підписка на події або сповіщення (включаючи email-нотифікації);
	upload/ – завантаження астрономічних зображень в додаток для подальшої обробки.
У взаємодії з базою даних використовується MongoDB (див. додаток Б), яка дозволяє зберігати документи гнучкої структури: користувачі, події, спостереження, результати обробки, підписки. Всі колекції пов’язані через ідентифікатори користувачів та об’єктів.
Основні моделі включають:
1.	User – інформація про зареєстрованого користувача.
2.	Observation – спостереження, яке містить астрономічне зображення, координати, дату та результати обробки.
3.	Calibration – результат астрометричної обробки (поле FOV, RA, DEC, знайдені об’єкти тощо).
4.	Event – астрономічна подія (наприклад, сонячний спалах або геомагнітна буря).
5.	EmailSchema – лист для підписки користувача на подію.
Система використовує JWT-токени для авторизації користувачів. Після входу користувач отримує токен доступу, який додається до всіх запитів до захищених маршрутів. Авторизація реалізована на рівні ролей – деякі дії доступні лише адміністраторам (наприклад, модерація спостережень).
Система інтегрується з:
	Astrometry.net API – для обробки астрономічних зображень (визначення координат, поля зору, об'єктів);
	NASA API DONKI – для імпорту майбутніх астрономічних подій (з подальшим збереженням у MongoDB);
	Email-службами (SMTP, SendGrid) – для надсилання сповіщень про підписки на події.
Загалом, в розробці системи використані такі технології:
1.	FastAPI – фреймворк для створення асинхронного REST API на Python.
2.	React – клієнтський інтерфейс з кастомним дизайном (TailwindCSS).
3.	MongoDB – гнучка нереляційна база даних.
4.	Pydantic – валідація та серіалізація даних на бекенді.
5.	Uvicorn – ASGI-сервер для розгортання FastAPI.
6.	Motor – асинхронна робота з MongoDB;

3.2	 Бізнес-логіка системи

Бізнес-логіка системи Cosmorum побудована навколо процесів обробки астрономічних спостережень, взаємодії з користувачами та надання релевантної наукової інформації. Основна ідея – забезпечити якісний потік науково-обґрунтованого контенту, пов’язаного з астрофотографією та астрономічними подіями, а також підтримку спільноти через публікації, оцінювання та підписки.
Основні функціональні напрямки бізнес-логіки:
1.	Обробка астрономічних спостережень: зображення проходять через астрометричний аналіз (за допомогою Astrometry.net), після чого отримані координати, об’єкти та параметри зберігаються як чернетки для підтвердження користувачем.
2.	Система підтвердження та модерації: користувач самостійно підтверджує дані після аналізу, редагує метадані та коригує координати, перш ніж публікація стане доступною для публічного перегляду.
3.	Публікація астрономічних подій: система щоденно імпортує астрономічні події (сонячні спалахи, геомагнітні бурі) з відкритих джерел (зокрема NASA API), які потім фільтруються, категоризуються і зберігаються для перегляду користувачами.
4.	Механізм підписки: користувачі можуть підписуватися на події, що їх цікавлять, і отримувати сповіщення електронною поштою за день до настання події.
5.	Система геоприв’язки: усі спостереження містять координати місця зйомки. Користувач може додавати координати вручну або за допомогою пошуку по місту/країні. 
6.	Профілі користувачів: кожен користувач має публічну сторінку з інформацією про себе, списком його спостережень та підписок на події.

3.3 Розширення бізнес-логіки
3.3.1 Математичні методи у серверній частині

Бізнес-логіка реалізована у вигляді окремих функцій, які обробляють логіку підтвердження спостережень, збереження результатів аналізу, обробку координат і роботу з астрономічними подіями. У серверній частині використовуються  обчислення поля зору (FOV) – на основі результатів астрометрії (за даними з Astrometry.net) та часові розрахунки (модуль datetime) – для планування нагадувань про події, визначення поточних і майбутніх дат. Обчислення поля зору (FOV) відбувається за формулою:

FOV = (pixel scale × image size in pixels)
FOV_x = scale × width
FOV_y = scale × height
де: 
	FOV_x – поле зору по горизонталі (в arcminutes або degrees),
	FOV_y – поле зору по вертикалі,
	scale – масштаб зображення (arcseconds per pixel, видає Astrometry.net),
	width / height – розміри зображення в пікселях.
Відповідно, обчислення поля зору реалізується такою функцією:

1  def calculate_fov(scale_arcsec_per_pixel: float, width_px: int, height_px: int):
2      """
3      Обчислює поле зору (FOV) по горизонталі та вертикалі.
4      
5      :param scale_arcsec_per_pixel: масштаб зображення (arcseconds per pixel)
6      :param width_px: ширина зображення в пікселях
7      :param height_px: висота зображення в пікселях
8      :return: кортеж (FOV_x, FOV_y) у градусах
9      """
10      # arcsec to degrees
11      fov_x_deg = (scale_arcsec_per_pixel * width_px) / 3600
12      fov_y_deg = (scale_arcsec_per_pixel * height_px) / 3600
13      return round(fov_x_deg, 3), round(fov_y_deg, 3)
14  

3.3.2 Геопозиціювання спостережень

Іншим прикладом може бути алгоритм геопозиціювання: якщо користувач вводить назву міста, система використовує API геокодування для визначення координат. Далі координати зберігаються у полі location формату GeoJSON, що дає змогу застосовувати геозапити.

1 async def geocode_place_name(place_name: str):
2     async with httpx.AsyncClient() as client:
3         response = await client.get(
4             "https://nominatim.openstreetmap.org/search",
5             params={"q": place_name, "format":"json", "limit": 1},
6             headers={"User-Agent": "CosmorumAstroApp"}
7         )
8 
9         try:
10             data = response.json()
11         except Exception:
12             return None, None
13 
14         if data:
15             return float(data[0]["lat"]), float(data[0]["lon"])
16         return None, None


	3.3.3 Впровадження інтернаціоналізації

	Наступним прикладом розширення бізнес-логіки є впровадження інтернаціоналізації. Для забезпечення мультимовності система використовує словники перекладу у форматі JSON. Вибрана користувачем мова зберігається в localStorage і впливає на динамічне завантаження інтерфейсних рядків. Користувач може змінити мову в налаштуваннях профілю. Це розширення бізнес-логіки дозволяє зробити застосунок доступнішим для ширшої аудиторії без перезавантаження сторінки або втрати сесії. У поточній реалізації серверна частина не містить локалізованих повідомлень. Проте, за потреби можлива реалізація відповідей з урахуванням заголовку Accept-Language, або підтримка мультимовних ресурсів (наприклад, назв подій у базі даних)
	
1  import uk from './i18n/uk.json'
2  import en from './i18n/en.json'
3  const translations = { uk, en }
4  
5  const [lang, setLang] = useState(localStorage.getItem("lang") || "uk")
6  const t = translations[lang]

	3.3.4 Експорт даних

	В системі також реалізований експорт даних про усі спостереження користувача, метою якого є збереження резервних копій інформації про калібрацію завантажених в систему зображень. Експорт реалізується через HTTP-запит GET функцією export_my_observations, після чого отримані дані зберігаються в новостворений файл. Ендпоінт експорту:



1  @router.get("/me/observations/export")
2  async def export_my_observations(current_user: dict = Depends(get_current_user)):
3      user_id = ObjectId(current_user["id"])
4      user_observations = list(observations.find({"user_id": user_id}))
5  
6      for obs in user_observations:
7          obs["id"] = str(obs["_id"])
8          del obs["_id"]
9          obs["user_id"] = str(obs["user_id"])
10  
11      timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
12      filename = f"export_{current_user['username']}_{timestamp}.json"
13      filepath = os.path.join(EXPORT_DIR, filename)
14  
15      with open(filepath, "w", encoding="utf-8") as f:
16          f.write(json_util.dumps(user_observations, indent=2, ensure_ascii=False))
17  
18      return { 
19          "message": "Observations exported successfully",
20          "file_path": f"/{filepath}"
21      }

В майбутньому бізнес-логіка може бути розширена через: 
1.	Рейтинг користувачів: формування рейтингів за кількістю спостережень, вподобаннями, унікальними об'єктами.
2.	Інтелектуальні підказки: рекомендації подій та об’єктів для спостереження на основі попередньої активності.
3.	Генерація щоденника астронома: автоматичне формування календаря з вашими минулими та запланованими спостереженнями.
4.	Машинне навчання для визначення об’єктів на фото: попередній аналіз об’єктів (наприклад, планет, туманностей, зоряних скупчень) на основі тренованих моделей.
 
4 ВИСНОВКИ


В результаті виконання даної лабораторної роботи було розроблено базу даних для серверної частини системи «Програмна система для збору, обробки та поширення астрономічних спостережень». Описано прийняті інженерні рішення, розроблено UML та ER діаграми. Функції роботи з базою даних протестовані за допомогою інструменту тестування Postman. 


	  
ДОДАТОК А
Відеозапис


	Відеозапис на YouTube: 
     	Хронологічний опис відеозапису:
	



 
ДОДАТОК Б
Графічні матеріали


 
Рисунок Б.1 – ER-діаграма даних

 
Рисунок Б.2 – UML-діаграма діяльності (астрометрія)

 
Рисунок Б.3 – UML-діаграма прецедентів

 
Рисунок Б.4 – UML-діаграма розгортання

 
ДОДАТОК В
Програмний код


В.1 Математична обробка даних
1  def calculate_fov(scale_arcsec_per_pixel: float, width_px: int, height_px: int):
2      """
3      Обчислює поле зору (FOV) по горизонталі та вертикалі.
4      
5      :param scale_arcsec_per_pixel: масштаб зображення (arcseconds per pixel)
6      :param width_px: ширина зображення в пікселях
7      :param height_px: висота зображення в пікселях
8      :return: кортеж (FOV_x, FOV_y) у градусах
9      """
10      # arcsec to degrees
11      fov_x_deg = (scale_arcsec_per_pixel * width_px) / 3600
12      fov_y_deg = (scale_arcsec_per_pixel * height_px) / 3600
13      return round(fov_x_deg, 3), round(fov_y_deg, 3)
14  

	В.2 Звʼязок з Astrometry.net
1  class AstrometryClient:
2      def __init__(self, api_key):
3          self.api_key = api_key
4          self.base_url = "http://nova.astrometry.net/api/"
5          self.session = self.login()
6  
7      def safe_json(self, response):
8          try:
9              return response.json()
10          except Exception:
11              raise Exception(f"Invalid JSON response: {response.text[:300]}")
12  
13      def login(self):
14          headers = {
15              "User-Agent": "Mozilla/5.0 (compatible; AstrometryClient/1.0)"
16          }
17          try:
18              response = requests.post(
19                  f"{self.base_url}login",
20                  data={"request-json": json.dumps({"apikey": self.api_key})},
21                  headers=headers,
22                  timeout=10
23              )
24              data = self.safe_json(response)
25              if data.get("status") != "success":
26                  raise Exception(f"Login failed: {data.get('errormessage', 'Unknown error')}")
27              return data["session"]
28          except requests.exceptions.RequestException as e:
29              raise Exception(f"Connection to astrometry.net failed: {str(e)}")
30  
31      def upload_image(self, image_path):
32          with open(image_path, "rb") as f:
33              files = {"file": f}
34              payload = {
35                  "request-json": json.dumps({
36                      "publicly_visible": "n",
37                      "allow_modifications": "d",
38                      "session": self.session
39                  })
40              }
41              response = requests.post(f"{self.base_url}upload", files=files, data=payload)
42              data = self.safe_json(response)
43              if data.get("status") != "success":
44                  raise Exception(f"Upload failed: {data.get('errormessage', 'Unknown error')}")
45              return data["subid"]
46  
47      def wait_for_submission(self, subid, timeout=1000):
48          start_time = time.time()
49          while time.time() - start_time < timeout:
50              response = requests.get(f"{self.base_url}submissions/{subid}")
51              data = self.safe_json(response)
52              jobs = data.get("jobs", [])
53              if jobs and jobs[0] is not None:
54                  return jobs[0]
55              time.sleep(5)
56          raise TimeoutError("Timed out waiting for job.")
57  
58      def wait_for_calibration(self, job_id, timeout=1000):
59          start_time = time.time()
60          while time.time() - start_time < timeout:
61              response = requests.get(f"{self.base_url}jobs/{job_id}")
62              data = self.safe_json(response)
63              if data.get("status") == "success":
64                  return
65              elif data.get("status") == "failure":
66                  raise Exception("Calibration failed.")
67              time.sleep(5)
68          raise TimeoutError("Timed out waiting for calibration.")
69  
70      def get_calibration(self, job_id):
71          response = requests.get(f"{self.base_url}jobs/{job_id}/calibration")
72          return self.safe_json(response)
73  
74      def get_objects_in_field(self, job_id):
75          response = requests.get(f"{self.base_url}jobs/{job_id}/objects_in_field")
76          return self.safe_json(response)

В.3 Обробка геоданих
1  async def geocode_place_name(place_name: str):
2      async with httpx.AsyncClient() as client:
3          response = await client.get(
4              "https://nominatim.openstreetmap.org/search",
5              params={"q": place_name, "format": "json", "limit": 1},
6              headers={"User-Agent": "CosmorumAstroApp"}
7          )
8  
9          try:
10              data = response.json()
11          except Exception:
12              return None, None
13  
14          if data:
15              return float(data[0]["lat"]), float(data[0]["lon"])
16          return None, None

В.4 Отримання поточного користувача
1  async def get_current_user(token: str = Depends(oauth2_scheme)):
2      credentials_exception = HTTPException(
3          status_code=status.HTTP_401_UNAUTHORIZED,
4          detail="Could not validate credentials",
5      )
6  
7      try:
8          payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
9          user_id: str = payload.get("sub")
10          if user_id is None:
11              raise credentials_exception
12      except JWTError:
13          raise credentials_exception
14  
15      try:
16          user = db.users.find_one({"_id": ObjectId(user_id)})
17      except Exception:
18          raise HTTPException(status_code=401, detail="Invalid user ID format")
19  
20      if user is None:
21          raise credentials_exception
22  
23      user["id"] = str(user["_id"])
24      del user["_id"]
25      if "password" in user:
26          del user["password"]
27  
28      return user
В.5 Відправка листів стосовно астрономічних подій
1  async def send_email(email: EmailSchema):
2      try:
3          message = MessageSchema(
4              subject=email.subject,
5              recipients=[email.email], 
6              body=email.body,
7              subtype="plain"
8          )
9  
10          fm = FastMail(conf)
11          await fm.send_message(message)
12          logging.info(f"Email sent to {email.email}")
13      except Exception as e:
14          logging.error(f"Failed to send email to {email.email}: {str(e)}")
15  
16  async def send_subscription_email(user_email: str, event_title: str):
17      email = EmailSchema(
18          email=user_email,
19          subject="Subscription to Astronomical Event",
20          body=f"Hello from the Cosmorum team! You've successfully subscribed to the event: {event_title}"
21      )
22      await send_email(email)
23  
24  def send_event_reminders():
25      from api.db import astronomical_events
26      tomorrow = datetime.utcnow().date() + timedelta(days=1)
27      start = datetime.combine(tomorrow, datetime.min.time())
28      end = datetime.combine(tomorrow, datetime.max.time())
29  
30      events = astronomical_events.find({
31          "start_time": {"$gte": start, "$lte": end},
32          "subscribers": {"$exists": True, "$ne": []}
33      })
34  
35      for event in events:
36          title = event.get("title", "Astronomical Event")
37          date_str = event.get("start_time").strftime("%Y-%m-%d %H:%M UTC")
38          link = event.get("link", "")
39  
40          for email in event.get("subscribers", []):
41              body = f"Reminder: '{title}' is happening on {date_str}.\n\nMore info: {link}"
42              send_email(
43                  to=email,
44                  subject=f"Reminder: Upcoming Astronomical Event Tomorrow",
45                  body=body
46              )


 
ДОДАТОК Г
Специфікація розробленого API
 

Перелік усіх існуючих ендпоінтів з їхнім описом наведено в таблиці 1.

Таблиця 1 – Специфікація системи  «Програмна система для збору, обробки та поширення астрономічних спостережень»
Ендпоінт 	Метод 	Опис 
/upload	POST 	Завантаження фото для астрометрії
/astrometry/process	POST 	Аналіз фото астрометрією
/observations	POST	Підтвердження результатів астрометрії 
/observations/{obs_id}	PUT 	Оновлення інформації про спостереження
/observations	GET 	Отримання інформації про всі спостереження
/observations/{obs_id}	GET 	Отримання інформації про спостереження
/observations/{obs_id}	DELETE	Видалення спостереження 
/events/import	POST	Імпорт астрономічних подій з API NASA 
/events/{event_id}/subscribe	POST	Підписка на подію

Продовження табл. 1 
Ендпоінт 	Метод 	Опис 
/users/register 	POST	Реєстрація користувача 
/users/login 	POST	Вхід в систему користувачем 
/users/me	GET	Інформація про користувача 
/users/me	PUT	Оновлення даних про користувача
/users/me	DELETE	Видалення користувача 
/users/me/observations/export	GET	Експорт даних про спостереження
/request-password-reset	POST	Запит на відновлення паролю
/search	GET	Пошук в системі 
/reset-password	POST	Відновлення паролю
/me/observations	GET	Список спостережень користувача 
/send-reminders	POST	Посилання нагадувань про події
/events	GET	Список усіх астрономічнх подій
